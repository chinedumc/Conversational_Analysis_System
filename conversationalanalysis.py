# -*- coding: utf-8 -*-
"""ConversationalAnalysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hi8_ZgqitQA9q5m29eNO19bgQLpbERkN
"""

# Commented out IPython magic to ensure Python compatibility.
from google.colab import drive
drive.mount('/gdrive')
# %cd /gdrive

!pip install tflearn

import tflearn

import nltk
from nltk.stem.lancaster import LancasterStemmer
nltk.download('punkt')

stemmer = LancasterStemmer()

import numpy
import tflearn
import tensorflow
import random
import json
import pickle

DATA_PATH = "/gdrive/My Drive/Conversational_Analysis"

with open(DATA_PATH+"/intents.json") as file:
  data = json.load(file)
  
try:
  with open(DATA_PATH+'/data.pickle', 'rb') as f:
    words, labels, training, output = pickle.load(f)
except:
  words = []
  labels = []
  docs_x = []
  docs_y = []

  #Introducing Stemming and Tokenization
  for intent in data['intents']:    #Looping through the json dictionary
    for pattern in intent['patterns']:   #Introducing stemming
      wrds = nltk.word_tokenize(pattern)
      words.extend(wrds)
      docs_x.append(wrds)
      docs_y.append(intent['tag'])

    if intent['tag'] not in labels:
      labels.append(intent['tag'])

   #Word Stemming    
  words = [stemmer.stem(w.lower()) for w in words if w != '?']
  words = sorted(list(set(words)))

  labels = sorted(labels)

    #Trainning our model
    #One-Hot Encoding

  training = []
  output = []

  out_empty = [0 for _ in range(len(labels))]

  for x, doc in enumerate(docs_x):
    bag = []

    wrds = [stemmer.stem(w) for w in doc]

    for w in words:
      if w in wrds:
        bag.append(1) # If the word exists

      else:
        bag.append(0) # If the words does not exist

    output_row = out_empty[:]
    output_row[labels.index(docs_y[x])] = 1

    training.append(bag)
    output.append(output_row)

    #Changing the list into arrays so we can feed them into our model
  training = numpy.array(training)
  output = numpy.array(output)

  with open(DATA_PATH+'/data.pickle', 'wb') as f:
    pickle.dump((words, labels, training, output), f)


# Calling up our model

tensorflow.reset_default_graph() #Reset all parameters

net = tflearn.input_data(shape=[None, len(training[0])]) #Define the input set for our model
net = tflearn.fully_connected(net, 8) #Hidden layer with 8 networks
net = tflearn.fully_connected(net, 8) #Hidden layer with 8 networks
net = tflearn.fully_connected(net, len(output[0]), activation='softmax') #Output layer
net = tflearn.regression(net)

model = tflearn.DNN(net) #Train our model

try:
  model.load('model.tflearn')
  
except:  
  #Training and Saving the Model
  model.fit(training, output, n_epoch=1000, batch_size=8, show_metric=True)
  #model.save('model.tflearn')

#Making Predictions

def bag_of_words(s, words):
  bag = [0 for _ in range(len(words))]
  
  s_words = nltk.word_tokenize(s)
  s_words = [stemmer.stem(word.lower()) for word in s_words]
  
  for se in s_words:
    for i, w in enumerate(words):
      if w == se:
        bag[i] = 1
        
  return numpy.array(bag)

def chat():
  print('Start talking with the bot(type quit to stop)!')
  while True: 
    inp = input('You: ')
    if inp.lower() == 'quit':
      break
      
      
    results = model.predict([bag_of_words(inp, words)])
    results_index = numpy.argmax(results)
    tag = labels[results_index]
    
    for tg in data['intents']:
      if tg['tag'] == tag:
        responses = tg['responses']
        
    print(random.choice(responses))
    
chat()